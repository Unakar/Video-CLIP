'''
Offer 2 different ways to deal with video data:
1. using pre-computed visual features (cosine similarity / binary search)
2. vector-database (milvus) for new video to insert and delete
'''
from .retrieval_config import *
import numpy as np
import pandas as pd
from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility
import torch

class VideoDataBase:
    def __init__(self):
        self.database = np.load(VISION_EMBEDDINGS_FILE_COSINE, mmap_mode='r')
        self.database_binary = np.load(VISION_EMBEDDINGS_FILE_BINARY)
        self.database_df = pd.read_csv(VIDEO_CSV_PATH)
    

class MilvusHelper:
    def __init__(self, collection_name):
        connections.connect(host=MILVUS_HOST, port=MILVUS_PORT)
        self.collection = None
        self.collection_name = collection_name
        self.create_collection()
        self.create_index()

    def get_num_entities(self):
        self.set_collection()
        self.collection.flush()
        num = self.collection.num_entities
        return num

    def set_collection(self):
        if self.has_collection():
            self.collection = Collection(name=self.collection_name)
  
    def has_collection(self):
        return utility.has_collection(self.collection_name)


    def create_collection(self):
        # Create milvus collection if not exists
        if not self.has_collection():
                
            video_id = FieldSchema(name="videod",
                                    dtype=DataType.INT64,
                                    descrition="the only id for every video-text pair",
                                    is_primary=True,
                                    auto_id=True)
                
            video_embedding = FieldSchema(name="video_embedding", 
                                            dtype=DataType.FLOAT_VECTOR, 
                                            descrition="float video_embedding generated by clip",
                                            dim=VECTOR_DIMENSION,
                                            is_primary=False,
                                            auto_id = False)
                
            schema = CollectionSchema(fields = [video_id,
                                                video_embedding], 
                                                description="video retrieval")
                
            self.collection = Collection(name=self.collection_name, schema=schema)
        else:
            self.set_collection()
            return "OK"
        
    def create_index(self):
        # Create IVF_FLAT index on milvus collection
        self.set_collection()
        if self.collection.has_index():
            return None
        default_index = {"index_type": INDEX_TYPE, "metric_type": METRIC_TYPE, "params": {"nlist": 16384}}
        # * nlist:16384后续可注意是否修改
        status = self.collection.create_index(field_name="video_embedding", index_params=default_index, timeout=60)
        return status
        

    def search_vectors(self, vectors, top_k):
        # Search vector in milvus collection
        for i, vector in enumerate(vectors):
            if isinstance(vector, torch.Tensor):
                vectors[i] = vector.detach().numpy()
            if isinstance(vector, np.ndarray):
                vectors[i] = vector.astype(np.float32)
        self.set_collection()
        self.collection.load()
        search_params = {"metric_type": METRIC_TYPE, "params": {"nprobe": 16}}
        res = self.collection.search(vectors, anns_field="bicycle_embedding", param=search_params, limit=top_k)
        if len(res[0].distances) > 0:
            print("distances:",res[0].distances[0])
        return res 
    
        